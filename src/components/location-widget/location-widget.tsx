import { useState, useEffect } from "react";

type Location = {
  latitude: number;
  longitude: number;
};

const LocationWidget = () => {
  const [location, setLocation] = useState<Location | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [debugInfo, setDebugInfo] = useState<string>("");
  //!
  const [tgObj, setTgObj] = useState<string | null>(null);

  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp
  useEffect(() => {
    let initInfo = "Telegram WebApp: ";

    if (window.Telegram?.WebApp) {
      initInfo += `–≤–µ—Ä—Å–∏—è ${window.Telegram.WebApp.version}, `;
      initInfo += `–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ ${window.Telegram.WebApp.platform}, `;
      initInfo += `–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${!!window.Telegram.WebApp.initData}`;
    } else {
      initInfo += "–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω";
    }

    setDebugInfo(initInfo);
    setTgObj(JSON.stringify(window.Telegram));
  }, []);

  const handleGetLocation = () => {
    setError(null);
    setLocation(null);
    setDebugInfo((prev) => prev + "\n\n–ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...");

    if (!window.Telegram?.WebApp) {
      setError("–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Telegram");
      setDebugInfo(
        (prev) => prev + "\n–û—à–∏–±–∫–∞: Telegram WebApp API –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
      );
      return;
    }

    try {
      window.Telegram.WebApp.requestLocation(
        (geo) => {
          setDebugInfo((prev) => prev + "\n–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
          setLocation({
            latitude: geo.latitude,
            longitude: geo.longitude,
          });
        },
        (err) => {
          const errorMsg = err?.error_message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
          setDebugInfo((prev) => prev + `\n–û—à–∏–±–∫–∞: ${errorMsg}`);
          setError(`–û—à–∏–±–∫–∞: ${errorMsg}`);
        }
      );
    } catch (e) {
      const error = e instanceof Error ? e.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      setDebugInfo((prev) => prev + `\n–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error}`);
      setError(`–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`);
    }
  };

  return (
    <div className="max-w-md mx-auto mt-2 p-4 bg-white rounded-lg shadow-md">
      <button
        onClick={handleGetLocation}
        className="w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md transition-colors"
      >
        üìç –ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      </button>

      {/* –ë–ª–æ–∫ –æ—Ç–ª–∞–¥–∫–∏ */}
      <div className="mt-4 p-3 bg-gray-100 rounded-md text-xs">
        <pre className="whitespace-pre-wrap break-words">{debugInfo}</pre>
      </div>

      {location && (
        <div className="mt-4 p-3 bg-gray-50 rounded-md">
          <p className="text-gray-700">
            –®–∏—Ä–æ—Ç–∞:{" "}
            <span className="font-mono">{location.latitude.toFixed(6)}</span>
          </p>
          <p className="text-gray-700 mt-1">
            –î–æ–ª–≥–æ—Ç–∞:{" "}
            <span className="font-mono">{location.longitude.toFixed(6)}</span>
          </p>
        </div>
      )}

      {error && (
        <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-md">
          <p className="text-red-600">{error}</p>
        </div>
      )}

      <div className="mt-4 p-3 bg-gray-50 rounded-md">
        <p className="text-gray-700">
          Telegram WebApp API: <span className="font-mono">{tgObj}</span>
        </p>
      </div>
    </div>
  );
};

export default LocationWidget;
